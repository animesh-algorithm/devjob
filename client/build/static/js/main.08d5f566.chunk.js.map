{"version":3,"sources":["constants/actionTypes.js","reducers/index.js","reducers/projects.js","api/index.js","components/Project/Project.js","actions/projects.js","components/Projects/Projects.js","components/Dashboard/Dashboard.js","components/ProjectForm/ProjectForm.js","App.js","index.js"],"names":["FETCH_ALL_PROJECTS","CREATE_PROJECT","FETCH_PROJECT","EDIT_PROJECT","combineReducers","projects","action","type","payload","data","map","project","_id","url","deleteProject","id","axios","post","editProject","updatedProject","Project","setCurrentProjectId","currentProjectId","dispatch","useDispatch","className","title","Button","component","Link","to","variant","onClick","a","api","console","error","features","feature","i","description","moment","deadline","format","href","demoLink","target","githubLink","Projects","useSelector","state","useEffect","get","Dashboard","ProjectForm","useState","isFinished","projectData","setProjectData","currentProject","find","history","useHistory","clear","autoComplete","method","placeholder","value","name","onChange","e","unselectable","preventDefault","newProject","push","App","path","exact","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08d5f566.chunk.js","sourcesContent":["export const FETCH_ALL_PROJECTS = 'FETCH_ALL_PROJECTS'\r\nexport const CREATE_PROJECT = 'CREATE_PROJECT'\r\nexport const FETCH_PROJECT = 'FETCH_PROJECT'\r\nexport const DELETE_PROJECT = 'DELETE_PROJECT'\r\nexport const EDIT_PROJECT = 'EDIT_PROJECT'","import { combineReducers } from \"redux\"\r\nimport projects from \"./projects\"\r\n\r\nexport default combineReducers({\r\n    projects\r\n})","import { CREATE_PROJECT, EDIT_PROJECT, FETCH_ALL_PROJECTS, FETCH_PROJECT } from '../constants/actionTypes'\r\n\r\nexport default (projects=[], action) => {\r\n    switch (action.type) {\r\n        case FETCH_ALL_PROJECTS:\r\n            return action.payload\r\n        case FETCH_PROJECT:\r\n            return action.payload\r\n        case CREATE_PROJECT:\r\n            return [...projects, action.payload]\r\n        case EDIT_PROJECT:\r\n            return projects.data.map(project => project._id === action.payload._id ? action.payload : project)\r\n        default:\r\n            return projects\r\n    }\r\n}","import axios from 'axios'\r\n\r\nconst url = 'https://devjobapp.herokuapp.com/api/v1/projects'\r\n\r\nexport const fetchProjects = () => axios.get(url)\r\nexport const createProject = (newProject) => axios.post(url, newProject)\r\nexport const fetchProject = (id) => axios.get(`${url}/${id}`)\r\nexport const deleteProject = (id) => axios.post(`${url}/${id}/delete`)\r\nexport const editProject = (id, updatedProject) => axios.post(`${url}/${id}/edit`, updatedProject)","import moment from 'moment';\r\nimport { Button } from \"@material-ui/core\"\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteProject } from '../../actions/projects';\r\n\r\nconst Project = ({ project, currentProjectId, setCurrentProjectId }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const handleDelete = () => {\r\n        dispatch(deleteProject(project._id))\r\n    }\r\n    const handleEdit = () => {\r\n        setCurrentProjectId(project._id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card m-2\" key={project._id}>\r\n            <h2 className='card-title'>{project.title}</h2>\r\n            <div className=\"container\">\r\n                <Button component={Link} className='card m-1' to='/projects/edit' variant='contained' onClick={handleEdit}>Edit</Button>\r\n                <Button className='card m-1' variant='contained' onClick={handleDelete}>Delete</Button>\r\n            </div>        \r\n            <ul className='text-left card-text'>\r\n                    {\r\n                        project.features && project.features.map((feature, i) => (\r\n                            <li key={i}>{feature}</li>\r\n                        ))\r\n                    }\r\n            </ul>\r\n            <p className='lead'>{project.description}</p>\r\n            <p className='text-left container'><span className='font-weight-bold'>Deadline:</span> {moment(project.deadline).format('DD/MM/YYYY')}</p>\r\n            <div className=\"container mb-2\">\r\n                <a href={project.demoLink} target='_blank'><button className=\"btn btn-sm btn-danger m-2\">Demo</button></a>\r\n                <a href={project.githubLink} target='_blank'><button className=\"btn btn-sm btn-danger m-2\">Code</button></a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project\r\n","import * as api from '../api'\r\nimport { FETCH_ALL_PROJECTS, CREATE_PROJECT, FETCH_PROJECT, DELETE_PROJECT, EDIT_PROJECT } from '../constants/actionTypes'\r\n\r\nexport const getProjects = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchProjects()\r\n        const action = {\r\n            type: FETCH_ALL_PROJECTS,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const getProject = (project) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchProject()\r\n        const action = {\r\n            type: FETCH_PROJECT,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const createProject = (project) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.createProject(project)\r\n\r\n        const action = {\r\n            type: CREATE_PROJECT,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const deleteProject = (id) => async (dispatch) => {\r\n    try {\r\n        await api.deleteProject(id)\r\n\r\n        const action = {\r\n            type: DELETE_PROJECT,\r\n            payload: id\r\n        }\r\n\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const editProject = (id, updatedProject) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.editProject(id, updatedProject)\r\n        \r\n        const action = {\r\n            type: EDIT_PROJECT,\r\n            payload: data\r\n        }\r\n\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}","import { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect } from 'react'\r\n\r\nimport { getProjects } from '../../actions/projects';\r\nimport './styles.css'\r\nimport Project from '../Project/Project';\r\n\r\nconst Projects = ({currentProjectId, setCurrentProjectId}) => {\r\n    const dispatch = useDispatch()\r\n    const projects = useSelector((state) => state.projects)\r\n\r\n    useEffect(() => {\r\n      dispatch(getProjects())\r\n    }, [projects, dispatch])\r\n\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {\r\n                projects.data && projects.data.map(project => <Project project={project} key={project._id} currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} /> )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects\r\n","import Projects from \"../Projects/Projects\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { Button } from \"@material-ui/core\"\r\n\r\nconst Dashboard = ({ currentProjectId, setCurrentProjectId }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className='display-2'>DEVJOB</h1>\r\n            <Button component={Link} to='/projects/create' variant='contained' className='card'>Create New Project</Button>\r\n            <br /><br />\r\n            <Projects currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import moment from 'moment'\r\nimport { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createProject, editProject } from '../../actions/projects'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Projects from '../Projects/Projects'\r\nimport './styles.css'\r\n\r\nconst ProjectForm = ({ currentProjectId, setCurrentProjectId }) => {\r\n    const [projectData, setProjectData] = useState({\r\n        title: '', description: '', deadline: '', isFinished: 0, demoLink: '', githubLink: ''\r\n    })\r\n    const currentProject = useSelector(state => currentProjectId ? state.projects.data.find(project => project._id === currentProjectId) : null)\r\n\r\n    useEffect(() => {\r\n        if (currentProject) setProjectData(currentProject)\r\n    }, [currentProjectId])\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (currentProject) {\r\n            dispatch(editProject(currentProjectId, projectData))            \r\n        } else {\r\n            dispatch(createProject(projectData))\r\n        }\r\n        clear()\r\n        history.push('/')\r\n    }\r\n\r\n    const clear = () => {\r\n        setCurrentProjectId(null)\r\n        setProjectData({\r\n            title: '', description: '', deadline: '', isFinished: 0, demoLink: '', githubLink: ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='container justify-content-center center'>\r\n                <h1 className='display-2'>DEVJOB</h1>\r\n                <form autoComplete='on' method='POST' className='text-center'>\r\n                    <input type=\"text\" placeholder=\"Project Title...\" className='form-control' value={projectData?.title} name='title' onChange={(e) => setProjectData(\r\n                        { ...projectData, title: e.target.value }\r\n                    )} />\r\n                    <input value={projectData?.description} type=\"text\" placeholder='Briefly describe your project.' className='form-control' name='description' onChange={(e) => setProjectData(\r\n                        { ...projectData, description: e.target.value }\r\n                    )} />\r\n                    <select value={currentProjectId ? projectData?.isFinished | 0 : \"-1\"} className='form-control form-select' name='isFinished' onChange={(e) => setProjectData(\r\n                        { ...projectData, isFinished: e.target.value }\r\n                    )}>\r\n                        <option value=\"-1\" unselectable='true'>Status</option>\r\n                        <option value=\"1\">Finished</option>\r\n                        <option value=\"0\">Not Finished</option>\r\n                    </select>\r\n                    <input value={moment(projectData?.deadline).format('yyyy-MM-DDThh:mm')} type=\"datetime-local\" className='form-control' name='deadline' onChange={(e) => setProjectData(\r\n                        { ...projectData, deadline: e.target.value }\r\n                    )} />\r\n                    <input value={projectData?.demoLink} type=\"text\" placeholder='Project Demo Link (if any)' className='form-control' name='demoLink' onChange={(e) => setProjectData(\r\n                        { ...projectData, demoLink: e.target.value }\r\n                    )} />\r\n                    <input value={projectData?.githubLink} type=\"text\" placeholder='Source Code Link (if any)' className='form-control' name='githubLink' onChange={(e) => setProjectData(\r\n                        { ...projectData, githubLink: e.target.value }\r\n                    )} />\r\n                    <input type=\"submit\" value={currentProject ? 'Edit Project' : 'Create Project'} className='btn btn-success form-control' onClick={handleSubmit} />\r\n                </form>\r\n            </div>\r\n\r\n            <Projects currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectForm\r\n","import React, { useState } from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport './App.css';\n\nimport Dashboard from './components/Dashboard/Dashboard';\nimport ProjectDetail from './components/ProjectDetail/ProjectDetail';\nimport ProjectForm from './components/ProjectForm/ProjectForm';\n\nfunction App() {\n  const [currentProjectId, setCurrentProjectId] = useState(null)\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={() => <Dashboard currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />} />\n        <Route path='/projects/create' exact component={() => <ProjectForm currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />}/>\n        {/* <Route path='/projects/:id' exact component={ProjectDetail} /> */}\n        <Route path='/projects/edit' exact component={() => <ProjectForm currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducers from './reducers'\n\nimport App from './App'\nimport './index.css'\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>, \n  document.getElementById('root')\n)"],"sourceRoot":""}
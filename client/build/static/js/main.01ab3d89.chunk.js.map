{"version":3,"sources":["constants/actionTypes.js","reducers/index.js","reducers/projects.js","api/index.js","components/Project/Project.js","components/Projects/Projects.js","actions/projects.js","components/Dashboard/Dashboard.js","components/ProjectForm/ProjectForm.js","App.js","index.js"],"names":["FETCH_ALL_PROJECTS","CREATE_PROJECT","combineReducers","projects","action","type","payload","url","Project","project","className","title","features","map","feature","i","description","moment","deadline","format","href","demoLink","target","githubLink","_id","Projects","dispatch","useDispatch","useSelector","state","useEffect","a","axios","get","data","console","error","Dashboard","Button","component","Link","to","variant","ProjectForm","useState","isFinished","projectData","setProjectData","history","useHistory","clear","autoComplete","method","placeholder","name","onChange","e","value","onClick","preventDefault","newProject","post","push","App","path","exact","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01ab3d89.chunk.js","sourcesContent":["export const FETCH_ALL_PROJECTS = 'FETCH_ALL_PROJECTS'\r\nexport const CREATE_PROJECT = 'CREATE_PROJECT'","import { combineReducers } from \"redux\"\r\nimport projects from \"./projects\"\r\n\r\nexport default combineReducers({\r\n    projects\r\n})","import { CREATE_PROJECT, FETCH_ALL_PROJECTS } from '../constants/actionTypes'\r\n\r\nexport default (projects=[], action) => {\r\n    switch (action.type) {\r\n        case FETCH_ALL_PROJECTS:\r\n            return action.payload\r\n        case CREATE_PROJECT:\r\n            return [...projects, action.payload]\r\n        default:\r\n            return projects\r\n    }\r\n}","import axios from 'axios'\r\n\r\nconst url = 'https://devjobapp.herokuapp.com/api/v1/projects'\r\n\r\nexport const fetchProjects = () => axios.get(url)\r\nexport const createProject = (newProject) => axios.post(url, newProject)","import moment from 'moment';\r\n\r\nconst Project = ({ project }) => {\r\n    return (\r\n        <div className=\"card m-2\" key={project._id}>\r\n            <h2 className='card-title'>{project.title}</h2>\r\n            <ul className='text-left card-text'>\r\n                    {\r\n                        project.features && project.features.map((feature, i) => (\r\n                            <li key={i}>{feature}</li>\r\n                        ))\r\n                    }\r\n            </ul>\r\n            <p className='lead'>{project.description}</p>\r\n            <p className='text-left container'><span className='font-weight-bold'>Deadline:</span> {moment(project.deadline).format('DD/MM/YYYY')}</p>\r\n            <div className=\"container mb-2\">\r\n                <a href={project.demoLink} target='_blank'><button className=\"btn btn-sm btn-danger m-2\">Demo</button></a>\r\n                <a href={project.githubLink} target='_blank'><button className=\"btn btn-sm btn-danger m-2\">Code</button></a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project\r\n","import { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect } from 'react'\r\n\r\nimport { getProjects } from '../../actions/projects';\r\nimport './styles.css'\r\nimport Project from '../Project/Project';\r\n\r\nconst Projects = () => {\r\n    const dispatch = useDispatch()\r\n    const projects = useSelector((state) => state.projects)\r\n    useEffect(() => {\r\n      dispatch(getProjects())\r\n    }, [projects, dispatch])\r\n\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {\r\n                projects.data && projects.data.map(project => <Project project={project} key={project._id}/> )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects\r\n","import * as api from '../api'\r\nimport { FETCH_ALL_PROJECTS, CREATE_PROJECT } from '../constants/actionTypes'\r\n\r\nexport const getProjects = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchProjects()\r\n        const action = {\r\n            type: FETCH_ALL_PROJECTS,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const createProject = (project) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.createProject(project)\r\n\r\n        const action = {\r\n            type: CREATE_PROJECT,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}","import Projects from \"../Projects/Projects\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { Button } from \"@material-ui/core\"\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className='display-2'>Dashboard</h1>\r\n            <Button component={Link} to='/projects/create' variant='contained' className='card'>Create New Project</Button>\r\n            <br /><br />\r\n            <Projects />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { createProject } from '../../actions/projects'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Projects from '../Projects/Projects'\r\nimport './styles.css'\r\n\r\nconst ProjectForm = () => {\r\n    const [projectData, setProjectData] = useState({\r\n        title: '', description: '', deadline: '', isFinished: 0, demoLink: '', githubLink: ''\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProject(projectData))\r\n        clear()\r\n        history.push('/')\r\n    }\r\n\r\n    const clear = () => {\r\n        setProjectData({\r\n            title: '', description: '', deadline: '', isFinished: 0, demoLink: '', githubLink: ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='container justify-content-center center'>\r\n                <h1 className='display-2'>DEVJOB</h1>\r\n                <form autoComplete='off' method='POST' className='text-center'>\r\n                    <input type=\"text\" placeholder=\"Project Title...\" className='form-control' name='title' onChange={(e) => setProjectData(\r\n                        { ...projectData, title: e.target.value }\r\n                    )} />\r\n                    <input type=\"text\" placeholder='Briefly describe your project.' className='form-control' name='description' onChange={(e) => setProjectData(\r\n                        { ...projectData, description: e.target.value }\r\n                    )} />\r\n                    <select className='form-control form-select' name='isFinished' onChange={(e) => setProjectData(\r\n                        { ...projectData, isFinished: e.target.value }\r\n                    )}>\r\n                        <option value=\"0\">Status</option>\r\n                        <option value=\"1\">Finished</option>\r\n                        <option value=\"0\">Not Finished</option>\r\n                    </select>\r\n                    <input type=\"datetime-local\" className='form-control' name='deadline' onChange={(e) => setProjectData(\r\n                        { ...projectData, deadline: e.target.value }\r\n                    )} />\r\n                    <input type=\"text\" placeholder='Project Demo Link (if any)' className='form-control' name='demoLink' onChange={(e) => setProjectData(\r\n                        { ...projectData, demoLink: e.target.value }\r\n                    )} />\r\n                    <input type=\"text\" placeholder='Source Code Link (if any)' className='form-control' name='githubLink' onChange={(e) => setProjectData(\r\n                        { ...projectData, githubLink: e.target.value }\r\n                    )} />\r\n                    <input type=\"submit\" value='Create Project' className='btn btn-success form-control' onClick={handleSubmit} />\r\n                </form>\r\n            </div>\r\n            <Projects />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectForm\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport './App.css';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport ProjectForm from './components/ProjectForm/ProjectForm';\nimport Projects from './components/Projects/Projects';\n\nfunction App() {\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={Dashboard} />\n        <Route path='/projects/create' exact component={ProjectForm}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducers from './reducers'\n\nimport App from './App'\nimport './index.css'\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>, \n  document.getElementById('root')\n)"],"sourceRoot":""}
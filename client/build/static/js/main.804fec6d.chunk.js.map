{"version":3,"sources":["constants/actionTypes.js","api/tasks.js","reducers/index.js","reducers/projects.js","reducers/tasks.js","api/projects.js","components/Project/Project.js","actions/tasks.js","actions/projects.js","components/Projects/Projects.js","components/Dashboard/Dashboard.js","components/ProjectForm/ProjectForm.js","components/TaskForm/TaskForm.js","App.js","index.js"],"names":["FETCH_ALL_PROJECTS","CREATE_PROJECT","FETCH_PROJECT","EDIT_PROJECT","GET_ALL_TASKS","url","createTask","projectId","newTask","axios","post","combineReducers","projects","action","type","payload","data","map","project","_id","tasks","deleteProject","id","editProject","updatedProject","Project","setCurrentProjectId","currentProjectId","dispatch","useDispatch","useSelector","state","useEffect","a","get","console","error","handleEdit","className","title","Button","component","Link","to","variant","onClick","projectsAPI","filter","task","length","i","name","features","feature","description","moment","deadline","format","href","demoLink","target","githubLink","Projects","Dashboard","ProjectForm","useState","isFinished","projectData","setProjectData","currentProject","find","history","useHistory","clear","autoComplete","method","placeholder","value","onChange","e","unselectable","preventDefault","newProject","push","TaskForm","isCompleted","taskData","setTaskData","taskAPI","App","path","exact","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.804fec6d.chunk.js","sourcesContent":["export const FETCH_ALL_PROJECTS = 'FETCH_ALL_PROJECTS'\r\nexport const CREATE_PROJECT = 'CREATE_PROJECT'\r\nexport const FETCH_PROJECT = 'FETCH_PROJECT'\r\nexport const DELETE_PROJECT = 'DELETE_PROJECT'\r\nexport const EDIT_PROJECT = 'EDIT_PROJECT'\r\nexport const CREATE_TASK = 'CREATE_TASK'\r\nexport const EDIT_TASK = 'EDIT_TASK'\r\nexport const GET_ALL_TASKS = 'GET_ALL_TASKS'\r\nexport const GET_ALL_TASKS_FOR_A_PROJECT = 'GET_ALL_TASKS_FOR_A_PROJECT'","import axios from 'axios'\r\n\r\nconst url = 'https://devjobapp.herokuapp.com/api/v1/tasks'\r\n\r\nexport const getAllTasks = () => axios.get(url)\r\nexport const getTasksForAProject = (projectId) => axios.get(`${url}/${projectId}`)\r\nexport const createTask = (projectId, newTask) => axios.post(`${url}/${projectId}/create`, newTask)\r\nexport const deleteTask = (projectId, taskId) => axios.post(`${url}/${projectId}/${taskId}/delete`)","import { combineReducers } from \"redux\"\r\nimport projects from \"./projects\"\r\nimport tasks from \"./tasks\"\r\n\r\nexport default combineReducers({\r\n    projects, tasks\r\n})","import { CREATE_PROJECT, EDIT_PROJECT, FETCH_ALL_PROJECTS, FETCH_PROJECT } from '../constants/actionTypes'\r\n\r\nexport default (projects=[], action) => {\r\n    switch (action.type) {\r\n        case FETCH_ALL_PROJECTS:\r\n            return action.payload\r\n        case FETCH_PROJECT:\r\n            return action.payload\r\n        case CREATE_PROJECT:\r\n            return [...projects, action.payload]\r\n        case EDIT_PROJECT:\r\n            return projects.data.map(project => project._id === action.payload._id ? action.payload : project)\r\n        default:\r\n            return projects\r\n    }\r\n}","import { CREATE_TASK, DELETE_TASK, GET_ALL_TASKS, GET_ALL_TASKS_FOR_A_PROJECT } from '../constants/actionTypes'\r\nimport * as taskAPI from '../api/tasks'\r\n\r\nexport default (tasks=[], action) => {\r\n    switch (action.type) {\r\n        case GET_ALL_TASKS:\r\n            return action.payload\r\n        default:\r\n            return tasks\r\n    }\r\n}","import axios from 'axios'\r\n\r\nconst url = 'https://devjobapp.herokuapp.com/api/v1/projects'\r\n\r\nexport const fetchProjects = () => axios.get(url)\r\nexport const createProject = (newProject) => axios.post(url, newProject)\r\nexport const fetchProject = (id) => axios.get(`${url}/${id}`)\r\nexport const deleteProject = (id) => axios.post(`${url}/${id}/delete`)\r\nexport const editProject = (id, updatedProject) => axios.post(`${url}/${id}/edit`, updatedProject)","import moment from 'moment';\r\nimport { Button } from \"@material-ui/core\"\r\nimport { Link } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteProject } from '../../actions/projects';\r\nimport { getAllTasks } from '../../actions/tasks';\r\n\r\nimport './styles.css'\r\n\r\nconst Project = ({ project, currentProjectId, setCurrentProjectId }) => {\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector(state => state.tasks)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllTasks())\r\n    }, [dispatch, tasks])\r\n\r\n    const handleDelete = () => {\r\n        dispatch(deleteProject(project._id))\r\n    }\r\n    const handleEdit = () => {\r\n        setCurrentProjectId(project._id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card m-2 project\" key={project._id}>\r\n            <h2 className='card-title'>{project.title}</h2>\r\n            <div className=\"container\">\r\n                <Button component={Link} className='card m-1' to='/projects/edit' variant='contained' onClick={handleEdit}>Edit</Button>\r\n                <Button className='card m-1' variant='contained' onClick={handleDelete}>Delete</Button>\r\n            </div>\r\n            <div className=\"container\">\r\n                <ul className='text-left card-text'>\r\n                    {\r\n                        tasks.data?.filter(task => task.project._id === project._id).length ? tasks.data.filter(task => task.project._id === project._id).map((task, i) => (\r\n                                <li key={i}>{task.name}</li>\r\n                        )) : <span>No Tasks</span>\r\n                    }\r\n                </ul>   \r\n            </div>\r\n            <div className=\"container\">\r\n                <Button component={Link} className='card m-1' to='/projects/tasks/create' variant='contained' onClick={handleEdit}>Create New Tasks</Button>\r\n            </div>\r\n            <ul className='text-left card-text'>\r\n                    {\r\n                        project.features && project.features.map((feature, i) => (\r\n                            <li key={i}>{feature}</li>\r\n                        ))\r\n                    }\r\n            </ul>\r\n            <p className='lead'>{project.description}</p>\r\n            <p className='text-center container'><span className='font-weight-bold'>Deadline:</span> {moment(project.deadline).format('DD/MM/YYYY')}</p>\r\n            <div className=\"container mb-2\">\r\n                <a href={project.demoLink} target='_blank'><button className=\"btn btn-sm btn-danger m-2\">Demo</button></a>\r\n                <a href={project.githubLink} target='_blank'><button className=\"btn btn-sm btn-danger m-2\">Code</button></a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project\r\n","import * as taskAPI from '../api/tasks'\r\nimport { CREATE_TASK, DELETE_TASK, GET_ALL_TASKS, GET_ALL_TASKS_FOR_A_PROJECT } from '../constants/actionTypes'\r\n\r\nexport const getAllTasks = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await taskAPI.getAllTasks()\r\n        const action = {\r\n            type: GET_ALL_TASKS,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const createTask = (projectId, newTask) => async (dispatch) => {\r\n    try {\r\n        const { data } = await taskAPI.createTask(projectId, newTask)\r\n        const action = {\r\n            type: CREATE_TASK,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}","import * as projectsAPI from '../api/projects'\r\nimport { FETCH_ALL_PROJECTS, CREATE_PROJECT, FETCH_PROJECT, DELETE_PROJECT, EDIT_PROJECT } from '../constants/actionTypes'\r\n\r\nexport const getProjects = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await projectsAPI.fetchProjects()\r\n        const action = {\r\n            type: FETCH_ALL_PROJECTS,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const getProject = (project) => async (dispatch) => {\r\n    try {\r\n        const { data } = await projectsAPI.fetchProject()\r\n        const action = {\r\n            type: FETCH_PROJECT,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const createProject = (project) => async (dispatch) => {\r\n    try {\r\n        const { data } = await projectsAPI.createProject(project)\r\n\r\n        const action = {\r\n            type: CREATE_PROJECT,\r\n            payload: data\r\n        }\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const deleteProject = (id) => async (dispatch) => {\r\n    try {\r\n        await projectsAPI.deleteProject(id)\r\n\r\n        const action = {\r\n            type: DELETE_PROJECT,\r\n            payload: id\r\n        }\r\n\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const editProject = (id, updatedProject) => async (dispatch) => {\r\n    try {\r\n        const { data } = await projectsAPI.editProject(id, updatedProject)\r\n        \r\n        const action = {\r\n            type: EDIT_PROJECT,\r\n            payload: data\r\n        }\r\n\r\n        dispatch(action)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}","import { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect } from 'react'\r\n\r\nimport { getProjects } from '../../actions/projects';\r\nimport './styles.css'\r\nimport Project from '../Project/Project';\r\n\r\nconst Projects = ({currentProjectId, setCurrentProjectId}) => {\r\n    const dispatch = useDispatch()\r\n    const projects = useSelector((state) => state.projects)\r\n\r\n    useEffect(() => {\r\n      dispatch(getProjects())\r\n    }, [projects, dispatch])\r\n\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {\r\n                projects.data && projects.data.map(project => <Project project={project} key={project._id} currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} /> )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects\r\n","import Projects from \"../Projects/Projects\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { Button } from \"@material-ui/core\"\r\n\r\nconst Dashboard = ({ currentProjectId, setCurrentProjectId }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className='display-2'>DEVJOB</h1>\r\n            <Button component={Link} to='/projects/create' variant='contained' className='card'>Create New Project</Button>\r\n            <br /><br />\r\n            <Projects currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import moment from 'moment'\r\nimport { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createProject, editProject } from '../../actions/projects'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Projects from '../Projects/Projects'\r\nimport './styles.css'\r\n\r\nconst ProjectForm = ({ currentProjectId, setCurrentProjectId }) => {\r\n    const [projectData, setProjectData] = useState({\r\n        title: '', description: '', deadline: '', isFinished: 0, demoLink: '', githubLink: ''\r\n    })\r\n    const currentProject = useSelector(state => currentProjectId ? state.projects.data.find(project => project._id === currentProjectId) : null)\r\n\r\n    useEffect(() => {\r\n        if (currentProject) setProjectData(currentProject)\r\n    }, [currentProjectId])\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (currentProject) {\r\n            dispatch(editProject(currentProjectId, projectData))            \r\n        } else {\r\n            dispatch(createProject(projectData))\r\n        }\r\n        clear()\r\n        history.push('/')\r\n    }\r\n\r\n    const clear = () => {\r\n        setCurrentProjectId(null)\r\n        setProjectData({\r\n            title: '', description: '', deadline: '', isFinished: 0, demoLink: '', githubLink: ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='container justify-content-center center'>\r\n                <h1 className='display-2'>DEVJOB</h1>\r\n                <form autoComplete='on' method='POST' className='text-center'>\r\n                    <input type=\"text\" placeholder=\"Project Title...\" className='form-control' value={projectData?.title} name='title' onChange={(e) => setProjectData(\r\n                        { ...projectData, title: e.target.value }\r\n                    )} />\r\n                    <input value={projectData?.description} type=\"text\" placeholder='Briefly describe your project.' className='form-control' name='description' onChange={(e) => setProjectData(\r\n                        { ...projectData, description: e.target.value }\r\n                    )} />\r\n                    <select value={currentProjectId ? projectData?.isFinished | 0 : \"-1\"} className='form-control form-select' name='isFinished' onChange={(e) => setProjectData(\r\n                        { ...projectData, isFinished: e.target.value }\r\n                    )}>\r\n                        <option value=\"-1\" unselectable='true'>Status</option>\r\n                        <option value=\"1\">Finished</option>\r\n                        <option value=\"0\">Not Finished</option>\r\n                    </select>\r\n                    <input value={moment(projectData?.deadline).format('yyyy-MM-DDThh:mm')} type=\"datetime-local\" className='form-control' name='deadline' onChange={(e) => setProjectData(\r\n                        { ...projectData, deadline: e.target.value }\r\n                    )} />\r\n                    <input value={projectData?.demoLink} type=\"text\" placeholder='Project Demo Link (if any)' className='form-control' name='demoLink' onChange={(e) => setProjectData(\r\n                        { ...projectData, demoLink: e.target.value }\r\n                    )} />\r\n                    <input value={projectData?.githubLink} type=\"text\" placeholder='Source Code Link (if any)' className='form-control' name='githubLink' onChange={(e) => setProjectData(\r\n                        { ...projectData, githubLink: e.target.value }\r\n                    )} />\r\n                    <input type=\"submit\" value={currentProject ? 'Edit Project' : 'Create Project'} className='btn btn-success form-control' onClick={handleSubmit} />\r\n                </form>\r\n            </div>\r\n\r\n            <Projects currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectForm\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { createTask } from '../../actions/tasks'\r\n\r\nimport './styles.css'\r\n\r\nconst TaskForm = ({ currentProjectId, setCurrentProjectId }) => {\r\n    const [taskData, setTaskData] = useState({\r\n        name: '', project: currentProjectId, isCompleted: false\r\n    })\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createTask(currentProjectId, taskData))\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className=\"container justify-content-center center\">\r\n                <h1 className='display-2'>DEVJOB</h1> \r\n                <form method=\"POST\" autoComplete='on' className=\"text-center\">\r\n                    <input type=\"text\" placeholder=\"Task\" className='form-control' name='name' onChange={(e) => setTaskData(\r\n                        { ...taskData, name: e.target.value }\r\n                    )} />\r\n                    <select className='form-control form-select' name='isCompleted' onChange={(e) => setTaskData(\r\n                        { ...taskData, isCompleted: e.target.value }\r\n                    )}>\r\n                        <option value=\"-1\" unselectable='true'>Status</option>\r\n                        <option value=\"1\">Finished</option>\r\n                        <option value=\"0\">Not Finished</option>\r\n                    </select>\r\n                    <input type=\"submit\" value='Create Task' className='btn btn-success form-control' onClick={handleSubmit} />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskForm\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport './App.css';\n\nimport Dashboard from './components/Dashboard/Dashboard';\nimport ProjectDetail from './components/ProjectDetail/ProjectDetail';\nimport ProjectForm from './components/ProjectForm/ProjectForm';\nimport TaskForm from './components/TaskForm/TaskForm';\n\nfunction App() {\n  const [currentProjectId, setCurrentProjectId] = useState(null)\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={() => <Dashboard currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />} />\n        <Route path='/projects/create' exact component={() => <ProjectForm currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />}/>\n        {/* <Route path='/projects/:id' exact component={ProjectDetail} /> */}\n        <Route path='/projects/edit' exact component={() => <ProjectForm currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />}/>\n        <Route path='/projects/tasks/create' exact component={() => <TaskForm currentProjectId={currentProjectId} setCurrentProjectId={setCurrentProjectId} />} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducers from './reducers'\n\nimport App from './App'\nimport './index.css'\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>, \n  document.getElementById('root')\n)"],"sourceRoot":""}